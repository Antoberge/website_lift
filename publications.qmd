---
title: "Nos Publications"
listing:
  id: pubslist
  contents: pubs
  type: grid
  grid-columns: 4
  sort: "date desc"
  page-size: 12
  fields: [image, title, date, categories, pdf, pubtype]
  filter-ui: false
  categories: false
---


<div class="pubtype-toggle btn-group mb-3" role="group" aria-label="Filtrer par type">
  <button class="btn btn-outline-secondary active" data-show="wp">Working Papers</button>
  <button class="btn btn-outline-secondary" data-show="policy">Policy Papers</button>
</div>

<div class="pubs-toolbar d-flex flex-wrap gap-2 align-items-center mb-3">
  <!-- search -->
  <input id="pubs-search" type="search" class="form-control form-control-sm"
         placeholder="Search publications…" style="max-width: 320px;">
  <!-- tags get injected here -->
  <div id="pubs-tags" class="d-flex flex-wrap gap-1 ms-auto"></div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function () {
  const root = document.getElementById('listing-pubslist');
  if (!root) return;

  const cards = root.querySelectorAll('.quarto-grid-item.card');

  cards.forEach(card => {
    // 1) Grab pdf + pubtype from the metadata table generated by Quarto
    const table = card.querySelector('.card-other-values');
    const pdfCell = table?.querySelector('td.pdf');
    const typeCell = table?.querySelector('td.pubtype');

    const pdfUrl  = pdfCell ? pdfCell.textContent.trim() : '';
    const pubtype = typeCell ? typeCell.textContent.trim() : '';

    if (pubtype) card.setAttribute('data-pubtype', pubtype);

    // 2) Ensure we have a meta row (PDF left, date right)
    const body  = card.querySelector('.card-body');
    const title = body?.querySelector('.card-title');
    let metaRow = body?.querySelector('.card-meta-row');

    if (!metaRow && body && title) {
      metaRow = document.createElement('div');
      metaRow.className = 'card-meta-row d-flex justify-content-between align-items-center mb-2';
      body.insertBefore(metaRow, title);
    }

    // 3) Add PDF button if we have a URL
    if (metaRow && pdfUrl) {
      const btn = document.createElement('a');
      btn.className = 'btn btn-sm btn-pdf stretched-link-fix';
      btn.href = pdfUrl;
      btn.setAttribute('download', '');
      btn.textContent = 'PDF';
      metaRow.prepend(btn);
    }

    // 4) Move the date into the meta row (to the right)
    const dateEl = card.querySelector('.listing-date');
    if (metaRow && dateEl) {
      dateEl.classList.add('text-muted', 'small', 'ms-auto');
      metaRow.appendChild(dateEl);
    }

    // 5) Hide/remove the raw metadata table so “/files/…” and “wp” disappear
    if (table) table.remove();
  });

  // === Optional: client-side filter WP / Policy ===
  const toggles = document.querySelectorAll('.pubtype-toggle [data-show]');
  function applyFilter(kind) {
    cards.forEach(c => {
      const t = c.getAttribute('data-pubtype') || '';
      c.style.display = (t === kind) ? '' : 'none';
    });
  }
  if (toggles.length) {
    toggles.forEach(b => b.addEventListener('click', () => {
      toggles.forEach(x => x.classList.remove('active'));
      b.classList.add('active');
      applyFilter(b.dataset.show);
    }));
    applyFilter('wp'); // default
  }
});
</script>
<script>
document.addEventListener('DOMContentLoaded', function () {
  const root   = document.getElementById('listing-pubslist');
  if (!root) return;

  const cards  = () => root.querySelectorAll('.quarto-grid-item.card');
  const search = document.getElementById('pubs-search');
  const tagBar = document.getElementById('pubs-tags');

  // ---- Build unique tag pills from card categories
  const tagSet = new Set();
  cards().forEach(card => {
    card.querySelectorAll('.listing-category').forEach(cat => {
      const label = (cat.textContent || '').trim();
      if (label) tagSet.add(label);
    });
  });

  // Render tag pills
  let selectedTag = null;
  function renderTags() {
    tagBar.innerHTML = '';
    // “All” pill (clear)
    const all = document.createElement('button');
    all.className = 'btn btn-sm btn-outline-secondary active';
    all.textContent = 'All tags';
    all.dataset.tag = '';
    tagBar.appendChild(all);

    [...tagSet].sort((a,b)=> a.localeCompare(b)).forEach(t => {
      const b = document.createElement('button');
      b.className = 'btn btn-sm btn-outline-secondary';
      b.textContent = t;
      b.dataset.tag = t;
      tagBar.appendChild(b);
    });

    tagBar.querySelectorAll('button').forEach(b=>{
      b.addEventListener('click', ()=>{
        tagBar.querySelectorAll('button').forEach(x=> x.classList.remove('active'));
        b.classList.add('active');
        selectedTag = b.dataset.tag || null;
        applyFilters();
      });
    });
  }
  renderTags();

  // Track selected type (WP/Policy) if your toggle is present
  let selectedType = 'wp';
  const typeBtns = document.querySelectorAll('.pubtype-toggle [data-show]');
  if (typeBtns.length) {
    typeBtns.forEach(b => b.addEventListener('click', ()=>{
      selectedType = b.dataset.show;
      applyFilters();
    }));
  }

  // Search handler
  let searchText = '';
  if (search) {
    search.addEventListener('input', ()=>{
      searchText = (search.value || '').trim().toLowerCase();
      applyFilters();
    });
  }

  // Core filter: type ∧ (tag?) ∧ (search?)
  function applyFilters() {
    cards().forEach(card => {
      const typeOk = (card.getAttribute('data-pubtype') || '').toLowerCase() === (selectedType || '');
      let tagOk = true;
      if (selectedTag) {
        tagOk = Array.from(card.querySelectorAll('.listing-category'))
          .some(cat => (cat.textContent || '').trim() === selectedTag);
      }
      let searchOk = true;
      if (searchText) {
        const hay = [
          card.querySelector('.listing-title')?.textContent || '',
          ...Array.from(card.querySelectorAll('.listing-category')).map(x => x.textContent || '')
        ].join(' ').toLowerCase();
        searchOk = hay.includes(searchText);
      }
      card.style.display = (typeOk && tagOk && searchOk) ? '' : 'none';
    });
  }

  // Initial filter (default to WP)
  applyFilters();
});
</script>
